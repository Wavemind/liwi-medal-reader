// @flow

import uuid from 'react-native-uuid';
import moment from 'moment';
import { Model } from '@nozbe/watermelondb';
import { field, date, children } from '@nozbe/watermelondb/decorators';

import I18n, { translateText } from '../../src/utils/i18n';
import Database from '../../src/engine/api/Database';
import { MedicalCaseModel } from './MedicalCase.model';
import { getItem, getItems } from '../../src/engine/api/LocalStorage';
import { displayFormats } from '../constants';

export class PatientModel {
  constructor(props = {}, environment = 'production') {
    let { facility = null } = props;
    if (props.uid !== undefined || props.study_id !== undefined || props.group_id !== undefined) {
      facility = { uid: props.uid, study_id: props.study_id, group_id: props.group_id };
    }

    if (this.id === undefined || this.id === null) {
      if (props.otherFacility !== null) {
        this.other_uid = props.otherFacility?.uid?.toString();
        this.other_study_id = props.otherFacility?.study_id?.toString();
        this.other_group_id = props.otherFacility?.group_id?.toString();
      } else {
        this.other_uid = null;
        this.other_study_id = null;
        this.other_group_id = null;
      }
      this.updated_at = moment(props.updated_at).toDate();
      this.created_at = moment(props.created_at).toDate();
      this.main_data_patient_id = props.main_data_patient_id;

      // if (props.patientValues !== undefined && props.patientValues.constructor.name === 'Query') {
      // } else {
      //   this.patientValues = patientValues?.map((patientValue) => new PatientValueModel(patientValue));
      // }
      this.uid = facility !== null ? facility?.uid?.toString() : null;
      this.study_id = facility !== null ? facility?.study_id?.toString() : null;
      this.group_id = facility !== null ? facility?.group_id?.toString() : null;
      this.reason = props.reason;

      this.consent_file =
        environment === 'production'
          ? props.consent_file
          : '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';

      this.medicalCases = props.medicalCases;
      this.patientValues = props.patientValues;
      this.fail_safe = false;

      if (props.id !== undefined) {
        this.id = props.id;
        this.medicalCases = props.medicalCases;
      } else {
        this.id = null;
      }
    }
  }

  /**
   * Push a medical case in a patient
   * @param { object } medicalCase
   * @returns {Promise<boolean>}
   */
  addMedicalCase = async (medicalCase) => {
    const user = await getItem('user');
    const medicalCaseClass = new MedicalCaseModel({ ...medicalCase, json: MedicalCaseModel.generateJSON(medicalCase) });
    const database = await new Database();
    const activity = await medicalCaseClass.generateActivity('registration', user, medicalCase.nodes);
    medicalCaseClass.patient_id = this.id;
    medicalCaseClass.json = MedicalCaseModel.generateJSON(medicalCaseClass);
    await medicalCaseClass.handleFailSafe();
    medicalCaseClass.activities = [activity];

    await database.push('Patient', this.id, 'medicalCases', medicalCaseClass);
    await database.update('Patient', this.id, { updated_at: moment().toDate() });
    return true;
  };

  /**
   * Save patient in database
   * @returns {Promise<void|string|Array|v.Chain|v.ExplicitChain<string>>}
   */
  save = async () => {
    const medicalCase = new MedicalCaseModel(this.medicalCases[this.medicalCases.length - 1]);
    const user = await getItem('user');
    const database = await new Database();
    this.id = uuid.v4();

    const activity = await medicalCase.generateActivity('registration', user, medicalCase.nodes);

    return database.insert('Patient', {
      ...this,
      medicalCases: [
        {
          ...medicalCase,
          patient_id: this.id,
          patient: null,
          json: MedicalCaseModel.generateJSON(medicalCase),
          activities: [activity],
        },
      ],
    });
  };

  /**
   * Returns an array of MedicalCaseLight used to display in a list of medicalCase
   * @returns {Array<{clinician: (string|string), mac_address: string, values: *, id: *, status: *}>}
   */
  medicalCasesLight = async (algorithm) => {
    const columns = algorithm.mobile_config.medical_case_list;
    const isConnected = await getItems('isConnected');
    const medicalCases = await this.medicalCases;

    return Promise.all(
      medicalCases.map(async (medicalCase) => {
        const values = isConnected ? medicalCase.values : await Promise.all(columns.map((nodeId) => medicalCase.getLabelFromNode(nodeId, algorithm)));
        return {
          id: medicalCase.id,
          status: medicalCase.status,
          clinician: medicalCase.clinician,
          mac_address: medicalCase.mac_address,
          values,
        };
      })
    );
  };

  /**
   * Format value or answer for a patient that has to be render
   * @param nodeId
   * @param algorithm
   * @returns {string}
   */
  getLabelFromNode = async (nodeId, algorithm) => {
    let displayedValue = '';
    const algorithmLanguage = await getItem('algorithmLanguage');
    const patientValues = await this.patientValues;
    const currentPatientValue = patientValues.find((patientValue) => patientValue.node_id === nodeId);

    const { nodes } = algorithm;

    if (currentPatientValue !== undefined) {
      if (nodes[currentPatientValue.node_id].display_format === displayFormats.date) {
        // Date display
        displayedValue = moment(currentPatientValue.value).format(I18n.t('application:date_format'));
      } else if (nodes[currentPatientValue.node_id].display_format === displayFormats.dropDownList) {
        // Date display
        displayedValue = translateText(nodes[currentPatientValue.node_id].answers[currentPatientValue.answer_id].label, [algorithmLanguage]);
      } else if (currentPatientValue.value === null && currentPatientValue.answer_id !== null) {
        // Answer display
        displayedValue = translateText(nodes[currentPatientValue.node_id].answers[currentPatientValue.answer_id].label, [algorithmLanguage]);
      } else if (currentPatientValue.value !== null && currentPatientValue.answer_id === null) {
        displayedValue = currentPatientValue.value;
      }
    }
    return displayedValue;
  };

  /**
   * Test if patient was already registered in an another facility
   * @returns {boolean}
   */
  wasInOtherFacility = () => {
    return this.other_uid !== null && this.other_uid !== undefined;
  };
}

export class Patient extends Model {
  static table = 'patients';

  static associations = {
    medical_cases: { type: 'has_many', foreignKey: 'patient_id' },
    patient_values: { type: 'has_many', foreignKey: 'patient_id' },
  };

  @children('medical_cases') medicalCases;

  @children('patient_values') patientValues;

  @field('id') id;

  @field('uid') uid;

  @field('study_id') study_id;

  @field('group_id') group_id;

  @field('other_uid') other_uid;

  @field('other_study_id') other_study_id;

  @field('other_group_id') other_group_id;

  @field('reason') reason;

  @field('consent') consent;

  @field('consent_file') consent_file;

  @field('fail_safe') fail_safe;

  @date('created_at') created_at;

  @date('updated_at') updated_at;
}
